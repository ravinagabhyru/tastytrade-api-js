import TastytradeHttpClient from "./services/tastytrade-http-client.js";
import { AccountStreamer, STREAMER_STATE, type Disposer, type StreamerStateObserver } from './account-streamer.js';
import MarketDataStreamer, { type CandleSubscriptionOptions, CandleType, MarketDataSubscriptionType, type MarketDataListener } from "./market-data-streamer.js";
import SessionService from "./services/session-service.js";
import AccountStatusService from "./services/account-status-service.js";
import AccountsAndCustomersService from "./services/accounts-and-customers-service.js";
import BalancesAndPositionsService from "./services/balances-and-positions-service.js";
import InstrumentsService from "./services/instruments-service.js";
import MarginRequirementsService from "./services/margin-requirements-service.js";
import MarketMetricsService from "./services/market-metrics-service.js";
import NetLiquidatingValueHistoryService from "./services/net-liquidating-value-history-service.js";
import OrderService from "./services/orders-service.js";
import RiskParametersService from "./services/risk-parameters-service.js";
import SymbolSearchService from "./services/symbol-search-service.js";
import TransactionsService from "./services/transactions-service.js";
import WatchlistsService from "./services/watchlists-service.js";
import TastytradeSession from "./models/tastytrade-session.js";
import type Logger from "./logger.js";
import { TastytradeLogger, LogLevel } from "./logger.js";
export type ClientConfig = {
    baseUrl: string;
    accountStreamerUrl: string;
    logger?: Logger;
    logLevel?: LogLevel;
};
export default class TastytradeClient {
    readonly logger: TastytradeLogger;
    readonly httpClient: TastytradeHttpClient;
    readonly accountStreamer: AccountStreamer;
    readonly sessionService: SessionService;
    readonly accountStatusService: AccountStatusService;
    readonly accountsAndCustomersService: AccountsAndCustomersService;
    readonly balancesAndPositionsService: BalancesAndPositionsService;
    readonly instrumentsService: InstrumentsService;
    readonly marginRequirementsService: MarginRequirementsService;
    readonly marketMetricsService: MarketMetricsService;
    readonly netLiquidatingValueHistoryService: NetLiquidatingValueHistoryService;
    readonly orderService: OrderService;
    readonly riskParametersService: RiskParametersService;
    readonly symbolSearchService: SymbolSearchService;
    readonly transactionsService: TransactionsService;
    readonly watchlistsService: WatchlistsService;
    constructor(config: ClientConfig);
    get session(): TastytradeSession;
}
export { MarketDataStreamer, MarketDataSubscriptionType, type MarketDataListener, type CandleSubscriptionOptions, CandleType };
export { AccountStreamer, STREAMER_STATE, type Disposer, type StreamerStateObserver };
export { TastytradeLogger, LogLevel };
export type { Logger };
//# sourceMappingURL=tastytrade-api.d.ts.map